CMAKE_MINIMUM_REQUIRED(VERSION 2.6.0)

SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules;${CMAKE_MODULE_PATH};$ENV{CMAKE_MODULE_PATH}")

INCLUDE(common OPTIONAL)

IF(NOT COMMON_MODULE_FOUND)
  MESSAGE(FATAL_ERROR "Unable to find common.cmake! Please place it in CMakeModules subdirectory, set CMAKE_MODULE_PATH environement variable or set CMAKE_MODULE_PATH parameter to CMake.")
ENDIF(NOT COMMON_MODULE_FOUND)

SET(VERSION_MAJOR 1)
SET(VERSION_MINOR 2)
SET(VERSION_PATCH 3)
SET(AUTHOR "<author>")
SET(PRODUCT "<project full name>")
SET(DESCRIPTION "<project description>")
SET(TARGET "<project identifier in lowercase>")
SET(YEAR "<copyright year(s)>")

PROJECT(${PRODUCT} CXX C)

INIT_DEFAULT_OPTIONS()

# Redefine default options
# SET_DEFAULT_OPTION(WITH_STATIC OFF)

SETUP_DEFAULT_OPTIONS()

# Add additional options here
# OPTION(WITH_ABC "With ABC" ON)

INIT_BUILD_FLAGS()
SETUP_BUILD_FLAGS()

SETUP_PREFIX_PATHS(${TARGET})
GEN_CONFIG_H()
GEN_INIT_D(debian/init.d)
GEN_PKGCONFIG(${TARGET}.pc)

SETUP_EXTERNAL()

# Add all FIND_PACKAGE macros
FIND_PACKAGE(Threads REQUIRED)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)

FILE(GLOB SRC src/*.cpp)
FILE(GLOB HEADER include/*.h)

ADD_DEFINITIONS(-D<your define>)

SET_TARGET_LIB(${TARGET} ${SRC} ${HEADER})
SET_TARGET_LABEL(${TARGET} ${PRODUCT})
TARGET_LINK_LIBRARIES(${TARGET} ${CMAKE_THREAD_LIBS_INIT})

IF(WITH_INSTALL_LIBRARIES)
  INSTALL(FILES ${HEADER} DESTINATION include COMPONENT headers)
ENDIF(WITH_INSTALL_LIBRARIES)
